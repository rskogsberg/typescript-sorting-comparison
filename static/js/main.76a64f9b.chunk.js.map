{"version":3,"sources":["assets/Hooks/swap.ts","assets/Hooks/delay.ts","context/GlobalContext.tsx","context/BubbleContext.tsx","assets/Hooks/useBubbleSort.ts","assets/Hooks/useQuickSort.tsx","assets/Hooks/useResetArray.ts","context/InsertionContext.tsx","assets/Hooks/useInsertionSort.ts","context/MergeContext.tsx","assets/Hooks/useMergeSort.tsx","components/SortingVisualizer/SortingVisualizer.tsx","assets/Hooks/useTimer.tsx","components/Navbar/Timer.tsx","components/Navbar/Navigation.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["swap","i","j","array","tempHolder","delay","Promise","resolve","setTimeout","GlobalContext","createContext","initialArray","setInitialArray","seconds","setSeconds","isRunning","setIsRunning","pivot","undefined","setPivot","currentQuickSwappers","setCurrentQuickSwappers","theme","setTheme","GlobalProvider","props","useState","Provider","value","children","BubbleContext","currentlyBubbling","setCurrentlyBubbling","BubbleProvider","useContext","useBubbleSort","bubbleSort","stateArray","a","slice","isSorted","counter","length","useQuickSort","quickSort","tempArr","checkArr","sort","b","quickSortHelper","startIndex","endIndex","sameOrderLength","leftIndex","rightIndex","pivotIndex","NUMBER_OF_ARRAY_BARS","Math","floor","window","innerWidth","useResetArray","resetArray","min","max","push","innerHeight","random","useEffect","InsertionContext","currentlyInserting","setCurrentlyInserting","InsertionProvider","useInsertionSort","insertionSort","MergeContext","currentlyMerging","setCurrentlyMerging","MergeProvider","useMergeSort","mergeSort","middleIndex","merge","result","l","r","concat","BubbleSort","className","map","idx","key","style","backgroundColor","includes","height","boxShadow","useTimer","AlgoTimer","interval","setInterval","clearInterval","Timer","Navigation","barsIconDefinition","findIconDefinition","prefix","iconName","sunIconDefinition","moonIconDefinition","menuActive","setMenuActive","themeIcon","setThemeIcon","handleMerge","icon","onClick","disabled","library","add","faBars","faSun","faMoon","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.76a64f9b.chunk.js","sourcesContent":["export function swap(i: number, j: number, array: number[]) {\n  const tempHolder: number = array[j];\n  array[j] = array[i];\n  array[i] = tempHolder;\n}","export function delay(delay: number) {\n  return new Promise((resolve) => setTimeout(resolve, delay));\n}","import React, { useState, createContext, ReactNode } from 'react';\n\nexport const GlobalContext = createContext<GlobalContextType>({\n  initialArray: [],\n  setInitialArray: () => null,\n  seconds: 0,\n  setSeconds: () => null,\n  isRunning: false,\n  setIsRunning: () => null,\n  pivot: undefined,\n  setPivot: () => null,\n  currentQuickSwappers: [],\n  setCurrentQuickSwappers: () => null,\n  theme: 'light',\n  setTheme: () => null\n});\n\ntype GlobalContextType = {\n  initialArray: number[],\n  setInitialArray: React.Dispatch<React.SetStateAction<number[]>>,\n  seconds: number,\n  setSeconds: React.Dispatch<React.SetStateAction<number>>,\n  isRunning: boolean,\n  setIsRunning: React.Dispatch<React.SetStateAction<boolean>>,\n  pivot: number | undefined,\n  setPivot: React.Dispatch<React.SetStateAction<number | undefined>>,\n  currentQuickSwappers: number[],\n  setCurrentQuickSwappers: React.Dispatch<React.SetStateAction<number[]>>,\n  theme: Theme,\n  setTheme: React.Dispatch<React.SetStateAction<Theme>>\n}\n\ntype Theme = 'light' | 'dark';\n\ntype Props = {\n  children: ReactNode\n}\n\nexport const GlobalProvider: React.ComponentType<Props> = props => {\n  const [initialArray, setInitialArray] = useState<number[]>([]);\n  const [pivot, setPivot] = useState<number>();\n  const [seconds, setSeconds] = useState<number>(0);\n  const [isRunning, setIsRunning] = useState<boolean>(false);\n  const [currentQuickSwappers, setCurrentQuickSwappers] = useState<number[]>([]);\n  const [theme, setTheme] = useState<Theme>('light');\n  \n  return(\n    <GlobalContext.Provider value={ { initialArray, setInitialArray, seconds, setSeconds, isRunning, setIsRunning, pivot, setPivot, currentQuickSwappers, setCurrentQuickSwappers, theme, setTheme }}>\n      {props.children}\n    </GlobalContext.Provider>\n  );\n}\n\nfunction randomIntFromInterval(min: number, max: number): number {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n","import React, { useState, createContext, ReactNode, useContext } from 'react';\nimport { GlobalContext } from './GlobalContext';\n\n\nexport const BubbleContext = createContext<BubbleContextType>({\n  currentlyBubbling: [],\n  setCurrentlyBubbling: () => null\n});\n\ntype BubbleContextType = {\n  currentlyBubbling: number[],\n  setCurrentlyBubbling: React.Dispatch<React.SetStateAction<number[]>>\n}\n\ntype Props = {\n  children: ReactNode\n}\n\nexport const BubbleProvider: React.ComponentType<Props> = props => {\n  const { initialArray } = useContext(GlobalContext);\n  const [currentlyBubbling, setCurrentlyBubbling] = useState<number[]>([]);\n\n  \n  return(\n    <BubbleContext.Provider value={ { currentlyBubbling, setCurrentlyBubbling }}>\n      {props.children}\n    </BubbleContext.Provider>\n  );\n}\n\nfunction randomIntFromInterval(min: number, max: number): number {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n","import { useContext } from 'react';\nimport { swap } from './swap';\nimport { delay } from './delay';\nimport { BubbleContext } from '../../context/BubbleContext';\nimport { GlobalContext } from '../../context/GlobalContext';\n\nlet awaitLength: number = 25;\n\nexport default function useBubbleSort () {\n\n  const { setInitialArray, isRunning, setIsRunning  } = useContext(GlobalContext);\n  const { currentlyBubbling, setCurrentlyBubbling } = useContext(BubbleContext);\n\n  const bubbleSort = async (stateArray: number[]) => {\n    let array = stateArray.slice(0);\n    let isSorted: boolean = false;\n    let counter: number = 0;\n\n    while (!isSorted) {\n      setIsRunning(!isRunning);\n      isSorted = true;\n      for (let i=0; i < array.length - counter - 1; i++) {\n        setCurrentlyBubbling([i, i+1]);\n        if (array[i] > array[i+1]) {\n          swap(i, i+1, array);\n          isSorted = false;\n        }\n        setInitialArray(array);\n        await delay(awaitLength)\n      }\n      counter++\n    }\n    setIsRunning(isRunning);\n    setCurrentlyBubbling([]);\n  }\n\n  return {\n    currentlyBubbling,\n    bubbleSort,\n  };\n}","import { useContext } from 'react';\nimport { swap } from './swap';\nimport { delay } from './delay';\nimport { GlobalContext } from '../../context/GlobalContext';\n\n\nexport default function useQuickSort () {\n  const { setInitialArray, pivot, setPivot, currentQuickSwappers, setCurrentQuickSwappers, isRunning, setIsRunning } = useContext(GlobalContext);\n  \n  const quickSort = async(stateArray: number[]) => {\n    const array = stateArray.slice(0);\n    setIsRunning(!isRunning);\n    const tempArr: number[] = array.slice(0);\n    const checkArr: number[] = tempArr.sort((a, b) => a - b);\n    await quickSortHelper(array, 0, array.length - 1, checkArr);\n  }\n\n  const quickSortHelper = async(array: number[], startIndex: number, endIndex: number, checkArr: number[]) => {\n    if (startIndex >= endIndex) {\n      let sameOrderLength: number = 0;\n      for (let i=0; i < array.length; i++) {\n        if(array[i] == checkArr[i]){\n          sameOrderLength += 1\n        } \n      }\n      if (array.length == sameOrderLength){\n        setPivot(undefined);\n        setCurrentQuickSwappers([]);\n        setIsRunning(isRunning);\n      }\n      return\n    }\n    let pivotIndex = startIndex;\n    let leftIndex = startIndex + 1;\n    let rightIndex = endIndex;\n    setPivot(pivotIndex);\n    setCurrentQuickSwappers([leftIndex, rightIndex]);\n    while (rightIndex >= leftIndex) {\n      if (array[leftIndex] > array[pivotIndex] && array[rightIndex] < array[pivotIndex]){\n        setCurrentQuickSwappers([leftIndex, rightIndex]);\n        setInitialArray(array)\n        swap(leftIndex, rightIndex, array);\n      }\n      await delay(25);\n      if (array[leftIndex] <= array[pivotIndex]) {\n        setCurrentQuickSwappers([leftIndex, rightIndex]);\n        leftIndex++;\n      }\n      if (array[rightIndex] >= array[pivotIndex]){\n        setCurrentQuickSwappers([leftIndex, rightIndex]);\n        rightIndex--;\n      }\n    }\n    swap(pivotIndex, rightIndex, array);\n    setCurrentQuickSwappers([pivotIndex, rightIndex]);\n    setInitialArray(array);\n    const leftSubarrayIsSmaller = rightIndex - 1 - startIndex < endIndex - (rightIndex + 1);\n    if (leftSubarrayIsSmaller) {\n      quickSortHelper(array, startIndex, rightIndex - 1, checkArr);\n      quickSortHelper(array, rightIndex + 1, endIndex, checkArr);\n    } else {\n      quickSortHelper(array, rightIndex + 1, endIndex, checkArr);\n      quickSortHelper(array, startIndex, rightIndex - 1, checkArr);\n    }\n  }\n\n  return {\n    pivot,\n    currentQuickSwappers,\n    quickSort,\n  }\n\n}\n","import { useContext, useEffect } from 'react';\nimport { GlobalContext } from '../../context/GlobalContext';\nimport useQuickSort from './useQuickSort';\n\nconst NUMBER_OF_ARRAY_BARS: number = Math.floor(window.innerWidth / 40);\n\nexport default function useResetArray() {\n  const { initialArray, setInitialArray, setSeconds, theme, setTheme } = useContext(GlobalContext);\n  const { quickSort } = useQuickSort();\n\n  const resetArray = () => {\n    const array: number[] = [];\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n      array.push(randomIntFromInterval(5, window.innerHeight*0.69));\n    }\n    //const tempArr: number[] = array.slice(0);\n    //const checkArr: number[] = tempArr.sort((a, b) => a - b).reverse();\n    setInitialArray(array);\n    setSeconds(0);\n  }\n\n  useEffect(() => {\n    resetArray()\n  }, [])\n\n  function randomIntFromInterval(min: number, max: number): number {\n    // min and max included\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  }\n\n  return {\n    initialArray,\n    resetArray,\n  };\n\n}","import React, { useState, createContext, ReactNode, useEffect } from 'react';\nimport { GlobalContext } from './GlobalContext';\n\nexport const InsertionContext = createContext<InsertionContextType>({\n  currentlyInserting: [],\n  setCurrentlyInserting: () => null\n});\n\ntype InsertionContextType = {\n  currentlyInserting: number[],\n  setCurrentlyInserting: React.Dispatch<React.SetStateAction<number[]>>\n}\n\ntype Props = {\n  children: ReactNode\n}\n\nexport const InsertionProvider: React.ComponentType<Props> = props => {\n  const [currentlyInserting, setCurrentlyInserting] = useState<number[]>([]);\n  \n  return(\n    <InsertionContext.Provider value={ { currentlyInserting, setCurrentlyInserting }}>\n      {props.children}\n    </InsertionContext.Provider>\n  );\n}\n\nfunction randomIntFromInterval(min: number, max: number): number {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n","import React, { useContext } from 'react';\nimport { swap } from './swap';\nimport { delay } from './delay';\nimport { InsertionContext } from '../../context/InsertionContext';\nimport { GlobalContext } from '../../context/GlobalContext';\n\nexport default function useInsertionSort() {\n  const { setInitialArray, setIsRunning } = useContext(GlobalContext);\n  const { currentlyInserting, setCurrentlyInserting } = useContext(InsertionContext);\n\n  const insertionSort = async (stateArray: number[]) => {\n    setIsRunning(true);\n    let array = stateArray.slice(0);\n    for (let i=1; i < array.length; i++) {\n      let j: number = i;\n      while (j > 0 && array[j] < array[j-1]) {\n        setCurrentlyInserting([j, j-1]);\n        await delay(25)\n        setInitialArray(array);\n        swap(j, j-1, array);\n        j -= 1;\n      }\n    }\n    setIsRunning(false);\n    setCurrentlyInserting([])\n  }\n\n  return {\n    currentlyInserting,\n    insertionSort\n  };\n\n}","import React, { useState, createContext, ReactNode, useContext } from 'react';\nimport { GlobalContext } from './GlobalContext';\n\nexport const MergeContext = createContext<MergeContextType>({\n  currentlyMerging: [],\n  setCurrentlyMerging: () => null\n});\n\ntype MergeContextType = {\n  currentlyMerging: number[],\n  setCurrentlyMerging: React.Dispatch<React.SetStateAction<number[]>>\n}\n\ntype Props = {\n  children: ReactNode\n}\n\nexport const MergeProvider: React.ComponentType<Props> = props => {\n  const { initialArray } = useContext(GlobalContext);\n  const [currentlyMerging, setCurrentlyMerging] = useState<number[]>([]);\n  \n  return(\n    <MergeContext.Provider value={ { currentlyMerging, setCurrentlyMerging }}>\n      {props.children}\n    </MergeContext.Provider>\n  );\n}\n\nfunction randomIntFromInterval(min: number, max: number): number {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n","import { useContext } from 'react';\nimport { swap } from './swap';\nimport { delay } from './delay';\nimport { GlobalContext } from '../../context/GlobalContext';\nimport { mainModule } from 'process';\nimport { MergeContext } from '../../context/MergeContext';\nimport { start } from 'repl';\nimport { EALREADY } from 'constants';\n\n\nexport default function useMergeSort () {\n  const { setInitialArray, isRunning, setIsRunning, setCurrentQuickSwappers } = useContext(GlobalContext);\n  const { currentlyMerging, setCurrentlyMerging } = useContext(MergeContext);\n  \n  const mergeSort = async(array: number[], leftIndex: number, rightIndex: number) => {\n    setIsRunning(true);\n    const length: number = rightIndex - leftIndex;\n    if (length < 2) {\n      return array\n    }\n    const middleIndex: number = leftIndex + Math.floor(length / 2);\n    await mergeSort(array, leftIndex, middleIndex);\n    await mergeSort(array, middleIndex, rightIndex);\n    await delay(25)\n    await merge(array, leftIndex, middleIndex, rightIndex);\n    //setCurrentQuickSwappers([])\n    setCurrentlyMerging([])\n    //setIsRunning(false);\n    const tempArr: number[] = array.slice(0);\n    const checkArr: number[] = tempArr.sort((a, b) => a - b);\n    let sameOrderLength: number = 0;\n    for (let i=0; i < array.length; i++) {\n      if(array[i] == checkArr[i]){\n        sameOrderLength += 1\n      }\n      if (array.length == sameOrderLength){\n        setCurrentQuickSwappers([]);\n        setIsRunning(isRunning);\n      }\n    }\n    return\n  }\n\n  const merge = async(array: number[], leftIndex: number, middleIndex: number, rightIndex: number) => {\n    let result: number[] = [];\n    let l: number = leftIndex;\n    let r: number = middleIndex;\n    while (l < middleIndex && r < rightIndex) {\n      if (array[l] < array[r]) {\n        setCurrentQuickSwappers([l , r]);\n        result.push(array[l++]);\n      } else {\n        setCurrentQuickSwappers([l, r]);\n        result.push(array[r++])\n      }\n    }\n    result = result.concat(array.slice(l, middleIndex)).concat(array.slice(r, rightIndex));\n    for (let i = 0; i < rightIndex - leftIndex; i++) {\n      setInitialArray([...array])\n      setCurrentlyMerging([leftIndex + i])\n      await delay(25)\n      array[leftIndex + i] = result[i]\n    }\n\n  }\n  \n\n  return {\n    currentlyMerging,\n    mergeSort,\n    setCurrentlyMerging\n  }\n\n}","import React, { useState, useEffect, useReducer, useContext } from 'react';\nimport useBubbleSort from '../../assets/Hooks/useBubbleSort';\nimport useResetArray from '../../assets/Hooks/useResetArray';\nimport useInsertionSort from '../../assets/Hooks/useInsertionSort';\nimport useQuickSort from '../../assets/Hooks/useQuickSort';\nimport { GlobalContext } from '../../context/GlobalContext';\nimport useMergeSort from '../../assets/Hooks/useMergeSort';\n\n// Change this value for the speed of the animations.\nconst ANIMATION_SPEED_MS: number = 10;\nconst NUMBER_OF_ARRAY_BARS: number = Math.floor(window.innerWidth / 40);\nconst PRIMARY_COLOR: string = '#03DAC6';\nconst SECONDARY_COLOR: string = '#3700B3';\n\nexport default function BubbleSort () {\n  let delay: number = 5;\n  const { theme } = useContext(GlobalContext);\n  const { currentlyBubbling, bubbleSort } = useBubbleSort();\n  const { currentlyInserting } = useInsertionSort();\n  const { initialArray, resetArray } = useResetArray();\n  const { pivot, currentQuickSwappers } = useQuickSort(); \n  const { currentlyMerging } = useMergeSort(); \n  //const { resetArray } = useResetArray();\n\n  useEffect(() => {\n    resetArray()\n  }, []);\n\n  return (\n    <div className={`array-container ${theme}`}>\n      <div className=\"array-card\">\n      {initialArray.map((value, idx) => (\n        <div className=\"array-bar\"\n        key={idx}\n        style={{\n          backgroundColor: currentlyBubbling.includes(idx) ? PRIMARY_COLOR : currentlyInserting.includes(idx) ? PRIMARY_COLOR : currentQuickSwappers.includes(idx) ? PRIMARY_COLOR : currentlyMerging.includes(idx) ? PRIMARY_COLOR : pivot === idx ? SECONDARY_COLOR : '#674AEE',\n          height: `${value}px`,\n          boxShadow: '0 14px 28px rgba(0,0,0,0.25), 0 10px 10px rgba(0,0,0,0.22)',\n        }}></div>\n      ))}\n      </div>\n    </div>\n  )\n}\n\nfunction randomIntFromInterval(min: number, max: number): number {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}","import React, { useContext, useEffect } from 'react';\nimport { GlobalContext } from '../../context/GlobalContext';\n\nexport default function useTimer() {\n  const { seconds, setSeconds, isRunning ,setIsRunning } = useContext(GlobalContext);\n\n  const AlgoTimer = () => {\n\n    useEffect(() => {\n      let interval: any = null;\n      if (isRunning) {\n        interval = setInterval(() => {\n          setSeconds(seconds => seconds + 1);\n        }, 1000);\n      } else if(!isRunning && seconds !== 0) {\n        clearInterval(interval);\n      }\n      return () => clearInterval(interval);\n    }, [isRunning, seconds]);\n  }\n\n  return {\n    AlgoTimer,\n    seconds,\n    isRunning,\n    setSeconds,\n    setIsRunning\n  }\n}","import React, { useContext } from 'react';\nimport { GlobalContext } from '../../context/GlobalContext'\nimport useTimer from '../../assets/Hooks/useTimer';\n\nexport default function Timer() {\n  const { AlgoTimer } = useTimer();\n  const { seconds } = useContext(GlobalContext);\n\n  AlgoTimer();\n\n  return (\n    <div className=\"timer\">\n      <div className=\"time\">\n        {seconds}s\n      </div>\n      <div className=\"row\">\n      </div>\n    </div>\n  );\n}","import React, { useState, useContext} from 'react';\nimport useBubbleSort from '../../assets/Hooks/useBubbleSort'\nimport { BubbleContext } from '../../context/BubbleContext';\nimport { GlobalContext } from '../../context/GlobalContext';\nimport useInsertionSort from '../../assets/Hooks/useInsertionSort'\nimport { InsertionContext } from '../../context/InsertionContext'\nimport useResetArray from '../../assets/Hooks/useResetArray';\nimport useQuickSort from '../../assets/Hooks/useQuickSort';\nimport Timer from './Timer';\nimport { delay } from '../../assets/Hooks/delay'\nimport useTimer from '../../assets/Hooks/useTimer';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport {\n  IconLookup,\n  IconDefinition,\n  findIconDefinition\n} from '@fortawesome/fontawesome-svg-core'\nimport useMergeSort from '../../assets/Hooks/useMergeSort';\n\nexport default function Navigation() {\n\n  const barsLookup: IconLookup = { prefix: 'fas', iconName: 'bars' }\n  const barsIconDefinition: IconDefinition = findIconDefinition(barsLookup)\n  const sunLookup: IconLookup = { prefix: 'fas', iconName: 'sun' }\n  const sunIconDefinition: IconDefinition = findIconDefinition(sunLookup);\n  const moonLookup: IconLookup = { prefix: 'fas', iconName: 'moon' }\n  const moonIconDefinition: IconDefinition = findIconDefinition(moonLookup);\n\n  const [menuActive, setMenuActive] = useState<boolean>(false);\n  const [themeIcon, setThemeIcon] = useState<IconDefinition>(moonIconDefinition)\n  const { initialArray, setInitialArray ,seconds, setSeconds, isRunning ,setIsRunning, theme, setTheme } = useContext(GlobalContext);\n  const { bubbleSort } = useBubbleSort();\n  const { insertionSort } = useInsertionSort();\n  const { resetArray } = useResetArray();\n  const { quickSort } = useQuickSort();\n  const { AlgoTimer } = useTimer();\n  const { mergeSort } = useMergeSort();\n\n  function toggleTheme() {\n    setTheme(theme === \"light\" ? \"dark\" : \"light\");\n    setThemeIcon(theme === \"light\" ? sunIconDefinition : moonIconDefinition);\n  }\n\n  const handleMerge = async() => {\n    setSeconds(0);\n    await mergeSort(initialArray,0, initialArray.length);\n    await delay(25)\n    setInitialArray(initialArray);\n  }\n\n  return (\n    <nav className={`site-navigation ${theme}`}>\n      <span className='menu-title'>Sorting Algorithm Comparison</span>\n      <Timer />\n      <FontAwesomeIcon icon={themeIcon} className='toggle-button' onClick={toggleTheme}/>\n      <div className={`menu-content-container ${menuActive && 'active'}`}>\n        <ul>\n          <li>\n            <button disabled={isRunning} className='nav-text' onClick={() => resetArray()}>Reset</button>\n          </li>\n          <li>\n            <button disabled={isRunning} className='nav-text' onClick={() => bubbleSort(initialArray)}>Bubble Sort</button>\n          </li>\n          <li>\n            <button disabled={isRunning} className='nav-text' onClick={() => insertionSort(initialArray)}>Insertion Sort</button>\n          </li>\n          <li>\n            <button disabled={isRunning} className='nav-text' onClick={() => quickSort(initialArray)}>Quick Sort</button>\n          </li>\n          <li>\n            <button disabled={isRunning} className='nav-text' onClick={handleMerge}>Merge Sort</button>\n          </li>\n        </ul>\n      </div>\n      <FontAwesomeIcon icon={barsIconDefinition} className='menu-icon' onClick={() => setMenuActive(!menuActive)}/>\n    </nav>)\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport BubbleSort from './components/SortingVisualizer/SortingVisualizer';\nimport Navigation from './components/Navbar/Navigation';\n\nimport { BubbleProvider } from './context/BubbleContext';\nimport { InsertionProvider } from './context/InsertionContext';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { faBars, faSun, faMoon } from '@fortawesome/free-solid-svg-icons';\nimport { MergeProvider } from './context/MergeContext';\n\nlibrary.add(faBars, faSun, faMoon)\n\nfunction App() {\n  return (\n    <BubbleProvider>\n    <InsertionProvider>\n    <MergeProvider>\n      <Navigation></Navigation>\n      <BubbleSort></BubbleSort>\n    </MergeProvider>\n    </InsertionProvider>\n    </BubbleProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport  { GlobalProvider } from './context/GlobalContext';\nimport './assets/scss/base.scss'\n\nReactDOM.render(\n  <React.StrictMode>\n  <GlobalProvider>\n    <App />\n  </GlobalProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}